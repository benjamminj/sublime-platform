version: '3'

services:
  postgres:
    image: postgres:13.2
    container_name: postgres
    environment:
      POSTGRES_USER: sublime
      POSTGRES_DB: mantis
      PGDATA: /data/postgres
    env_file: sublime.env
    volumes:
       - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - net
    restart: unless-stopped
  dashboard:
    image: sublimesec/dashboard:0.24
    container_name: dashboard
    ports:
      - "0.0.0.0:3000:80"
    networks:
      - net
    env_file: sublime.env
  redis:
    image: redis:6.2
    container_name: redis
    command: redis-server --loglevel warning
    ports:
      - "6379:6379"
    networks:
      - net
  strelka-frontend:
    image: sublimesec/strelka-frontend:0.3
    command: strelka-frontend
    ports:
      - "57314:57314"
    networks:
      - net
    volumes:
      - ./configs/frontend/:/etc/strelka/:ro
      - logs:/var/log/strelka/
    restart: unless-stopped
    container_name: strelka_frontend_1
    depends_on:
      - strelka-coordinator
  strelka-backend:
    image: sublimesec/strelka-backend:0.3
    command: strelka-backend
    shm_size: 512mb
    networks:
      - net
    volumes:
      - ./configs/backend/:/etc/strelka/:ro
    restart: unless-stopped
    container_name: strelka_backend_1
    depends_on:
      - strelka-coordinator
  strelka-manager:
    image: sublimesec/strelka-manager:0.3
    command: strelka-manager
    restart: unless-stopped
    container_name: strelka_manager_1
    networks:
      - net
    volumes:
      - ./configs/manager/:/etc/strelka/:ro
    depends_on:
      - strelka-coordinator
  strelka-coordinator:
    image: redis:alpine
    command: redis-server --save "" --appendonly no
    container_name: strelka_coordinator_1
    networks:
      - net
  screenshot-service:
    image: sublimesec/render-email-html:0.1
    ports:
      - "8100:8100"
    environment:
      - S3_ENDPOINT=http://sublime_s3:8110
      - SCREENSHOT_BUCKET=email-screenshots
      - AWS_REGION=us-east-1
      - DISABLE_DD=true
    container_name: screenshot-service
    env_file: sublime.env
    networks:
      - net
    depends_on:
      - create-buckets
  sublime_s3:
    container_name: sublime_s3
    image: minio/minio
    networks:
      - net
    ports:
      - "8110:8110"
    volumes:
      - s3_data:/data
    env_file: sublime.env
    entrypoint: >
      /bin/sh -c "
      export MINIO_ROOT_USER=$$AWS_ACCESS_KEY_ID;
      export MINIO_ROOT_PASSWORD=$$AWS_SECRET_ACCESS_KEY;
      minio server --address 0.0.0.0:8110 --console-address 0.0.0.0:8111  /data;
      "
  create-buckets:
    image: alpine:3.16.0
    depends_on:
      - sublime_s3
    networks:
      - net
    env_file: sublime.env
    # TODO: most of the entrypoint is setup that could be done within a published docker image
    entrypoint: >
      /bin/sh -c "
      apk update \
      && apk add --no-cache \
              bind-tools \
              python3 \
              py3-pip \
          && pip3 install --upgrade pip \
          && pip3 install --no-cache-dir \
              awscli \
          && rm -rf /var/cache/apk/*;
      endpoint=$$(host sublime_s3 | grep -o ' [0-9\.]*$$*' | xargs);
      echo $endpoint;
      aws s3api create-bucket --no-verify-ssl --endpoint-url=http://$$endpoint:8110 --bucket events;
      aws s3api create-bucket --no-verify-ssl --endpoint-url=http://$$endpoint:8110 --bucket email-screenshots;
      aws s3api create-bucket --no-verify-ssl --endpoint-url=http://$$endpoint:8110 --bucket message-storage;
      exit 0;
      "

networks:
  net:
    driver: bridge

volumes:
  postgres:
  logs:
  s3_data:
